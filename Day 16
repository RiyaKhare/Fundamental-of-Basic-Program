//. 3Sum

//Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


//Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105










//Code-
class Solution {
    public List<List<Integer>> threeSum(int[] n) {
        Arrays.sort(n);
        List<List<Integer>> list = new ArrayList<>();
        int sum = 0;
        for(int i = 0 ; i<n.length; i++){
            if(i ==0 || n[i] != n[i-1]){
            int j = i+1;
            int k = n.length -1;
            while(j < k){
                sum = n[j] + n[k] +n[i];
                if(sum > 0){
                    k--;
                }
                else if(sum < 0){
                    j++;
                }
                else{
                    ArrayList<Integer> inside = new ArrayList<>();
                    inside.add(n[i]);
                    inside.add(n[j]);
                    inside.add(n[k]);
                    list.add(inside);

                    while (j < k && n[j] == n[j+1]){
                        j++;
                    }
                    while(j < k && n[k] == n[k-1]){
                     k--;
                    }

                    j++;
                    k--;
                }
            }
            }
        }
        return list;

    }
}
